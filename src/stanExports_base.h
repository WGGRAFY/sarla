// Generated by rstantools.  Do not edit by hand.

/*
    sarla is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    sarla is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with sarla.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_base_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_base");
    reader.add_event(96, 94, "end", "model_base");
    return reader;
}
#include <stan_meta_header.hpp>
class model_base
  : public stan::model::model_base_crtp<model_base> {
private:
        int Nages;
        int Nyears;
        int Ncohorts;
        std::vector<std::vector<int> > cohort_id;
        matrix_d laa;
        std::vector<double> sigma_o_prior;
        int est_cohort_effects;
        int est_year_effects;
        int est_init_effects;
        int N_eta_c;
        int N_gamma_y;
        int N_delta_c;
        int n_proc_error;
public:
    model_base(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_base(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_base_namespace::model_base";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "Nages", "int", context__.to_vec());
            Nages = int(0);
            vals_i__ = context__.vals_i("Nages");
            pos__ = 0;
            Nages = vals_i__[pos__++];
            check_greater_or_equal(function__, "Nages", Nages, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "Nyears", "int", context__.to_vec());
            Nyears = int(0);
            vals_i__ = context__.vals_i("Nyears");
            pos__ = 0;
            Nyears = vals_i__[pos__++];
            check_greater_or_equal(function__, "Nyears", Nyears, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "Ncohorts", "int", context__.to_vec());
            Ncohorts = int(0);
            vals_i__ = context__.vals_i("Ncohorts");
            pos__ = 0;
            Ncohorts = vals_i__[pos__++];
            check_greater_or_equal(function__, "Ncohorts", Ncohorts, 1);
            current_statement_begin__ = 5;
            validate_non_negative_index("cohort_id", "Nages", Nages);
            validate_non_negative_index("cohort_id", "Ncohorts", Ncohorts);
            context__.validate_dims("data initialization", "cohort_id", "int", context__.to_vec(Nages,Ncohorts));
            cohort_id = std::vector<std::vector<int> >(Nages, std::vector<int>(Ncohorts, int(0)));
            vals_i__ = context__.vals_i("cohort_id");
            pos__ = 0;
            size_t cohort_id_k_0_max__ = Nages;
            size_t cohort_id_k_1_max__ = Ncohorts;
            for (size_t k_1__ = 0; k_1__ < cohort_id_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < cohort_id_k_0_max__; ++k_0__) {
                    cohort_id[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("laa", "Nages", Nages);
            validate_non_negative_index("laa", "Nyears", Nyears);
            context__.validate_dims("data initialization", "laa", "matrix_d", context__.to_vec(Nages,Nyears));
            laa = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Nages, Nyears);
            vals_r__ = context__.vals_r("laa");
            pos__ = 0;
            size_t laa_j_2_max__ = Nyears;
            size_t laa_j_1_max__ = Nages;
            for (size_t j_2__ = 0; j_2__ < laa_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < laa_j_1_max__; ++j_1__) {
                    laa(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("sigma_o_prior", "2", 2);
            context__.validate_dims("data initialization", "sigma_o_prior", "double", context__.to_vec(2));
            sigma_o_prior = std::vector<double>(2, double(0));
            vals_r__ = context__.vals_r("sigma_o_prior");
            pos__ = 0;
            size_t sigma_o_prior_k_0_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < sigma_o_prior_k_0_max__; ++k_0__) {
                sigma_o_prior[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "est_cohort_effects", "int", context__.to_vec());
            est_cohort_effects = int(0);
            vals_i__ = context__.vals_i("est_cohort_effects");
            pos__ = 0;
            est_cohort_effects = vals_i__[pos__++];
            check_greater_or_equal(function__, "est_cohort_effects", est_cohort_effects, 0);
            check_less_or_equal(function__, "est_cohort_effects", est_cohort_effects, 1);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "est_year_effects", "int", context__.to_vec());
            est_year_effects = int(0);
            vals_i__ = context__.vals_i("est_year_effects");
            pos__ = 0;
            est_year_effects = vals_i__[pos__++];
            check_greater_or_equal(function__, "est_year_effects", est_year_effects, 0);
            check_less_or_equal(function__, "est_year_effects", est_year_effects, 1);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "est_init_effects", "int", context__.to_vec());
            est_init_effects = int(0);
            vals_i__ = context__.vals_i("est_init_effects");
            pos__ = 0;
            est_init_effects = vals_i__[pos__++];
            check_greater_or_equal(function__, "est_init_effects", est_init_effects, 0);
            check_less_or_equal(function__, "est_init_effects", est_init_effects, 1);
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "N_eta_c", "int", context__.to_vec());
            N_eta_c = int(0);
            vals_i__ = context__.vals_i("N_eta_c");
            pos__ = 0;
            N_eta_c = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_eta_c", N_eta_c, 0);
            check_less_or_equal(function__, "N_eta_c", N_eta_c, Ncohorts);
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "N_gamma_y", "int", context__.to_vec());
            N_gamma_y = int(0);
            vals_i__ = context__.vals_i("N_gamma_y");
            pos__ = 0;
            N_gamma_y = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_gamma_y", N_gamma_y, 0);
            check_less_or_equal(function__, "N_gamma_y", N_gamma_y, Ncohorts);
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "N_delta_c", "int", context__.to_vec());
            N_delta_c = int(0);
            vals_i__ = context__.vals_i("N_delta_c");
            pos__ = 0;
            N_delta_c = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_delta_c", N_delta_c, 0);
            check_less_or_equal(function__, "N_delta_c", N_delta_c, Ncohorts);
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "n_proc_error", "int", context__.to_vec());
            n_proc_error = int(0);
            vals_i__ = context__.vals_i("n_proc_error");
            pos__ = 0;
            n_proc_error = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_proc_error", n_proc_error, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 19;
            num_params_r__ += 1;
            current_statement_begin__ = 20;
            validate_non_negative_index("pro_error_raw", "n_proc_error", n_proc_error);
            num_params_r__ += n_proc_error;
            current_statement_begin__ = 21;
            validate_non_negative_index("X0", "(1 - est_init_effects)", (1 - est_init_effects));
            num_params_r__ += (1 * (1 - est_init_effects));
            current_statement_begin__ = 22;
            num_params_r__ += 1;
            current_statement_begin__ = 23;
            num_params_r__ += 1;
            current_statement_begin__ = 24;
            validate_non_negative_index("eta_c_raw", "N_eta_c", N_eta_c);
            num_params_r__ += N_eta_c;
            current_statement_begin__ = 25;
            validate_non_negative_index("gamma_y_raw", "N_gamma_y", N_gamma_y);
            num_params_r__ += N_gamma_y;
            current_statement_begin__ = 26;
            validate_non_negative_index("delta_c_raw", "N_delta_c", N_delta_c);
            num_params_r__ += N_delta_c;
            current_statement_begin__ = 27;
            validate_non_negative_index("eta_c_sd", "est_init_effects", est_init_effects);
            num_params_r__ += (1 * est_init_effects);
            current_statement_begin__ = 28;
            validate_non_negative_index("delta_c_sd", "est_cohort_effects", est_cohort_effects);
            num_params_r__ += (1 * est_cohort_effects);
            current_statement_begin__ = 29;
            validate_non_negative_index("gamma_y_sd", "est_year_effects", est_year_effects);
            num_params_r__ += (1 * est_year_effects);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_base() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 19;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta", "double", context__.to_vec());
        double beta(0);
        beta = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(0.99), 0.99, beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 20;
        if (!(context__.contains_r("pro_error_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable pro_error_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("pro_error_raw");
        pos__ = 0U;
        validate_non_negative_index("pro_error_raw", "n_proc_error", n_proc_error);
        context__.validate_dims("parameter initialization", "pro_error_raw", "vector_d", context__.to_vec(n_proc_error));
        Eigen::Matrix<double, Eigen::Dynamic, 1> pro_error_raw(n_proc_error);
        size_t pro_error_raw_j_1_max__ = n_proc_error;
        for (size_t j_1__ = 0; j_1__ < pro_error_raw_j_1_max__; ++j_1__) {
            pro_error_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(pro_error_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable pro_error_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 21;
        if (!(context__.contains_r("X0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable X0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("X0");
        pos__ = 0U;
        validate_non_negative_index("X0", "(1 - est_init_effects)", (1 - est_init_effects));
        context__.validate_dims("parameter initialization", "X0", "double", context__.to_vec((1 - est_init_effects)));
        std::vector<double> X0((1 - est_init_effects), double(0));
        size_t X0_k_0_max__ = (1 - est_init_effects);
        for (size_t k_0__ = 0; k_0__ < X0_k_0_max__; ++k_0__) {
            X0[k_0__] = vals_r__[pos__++];
        }
        size_t X0_i_0_max__ = (1 - est_init_effects);
        for (size_t i_0__ = 0; i_0__ < X0_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(X0[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable X0: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 22;
        if (!(context__.contains_r("sigma_p")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_p missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_p");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_p", "double", context__.to_vec());
        double sigma_p(0);
        sigma_p = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_p);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_p: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 23;
        if (!(context__.contains_r("sigma_o")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_o missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_o");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_o", "double", context__.to_vec());
        double sigma_o(0);
        sigma_o = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_o);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_o: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("eta_c_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta_c_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta_c_raw");
        pos__ = 0U;
        validate_non_negative_index("eta_c_raw", "N_eta_c", N_eta_c);
        context__.validate_dims("parameter initialization", "eta_c_raw", "vector_d", context__.to_vec(N_eta_c));
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_c_raw(N_eta_c);
        size_t eta_c_raw_j_1_max__ = N_eta_c;
        for (size_t j_1__ = 0; j_1__ < eta_c_raw_j_1_max__; ++j_1__) {
            eta_c_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(eta_c_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta_c_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 25;
        if (!(context__.contains_r("gamma_y_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_y_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_y_raw");
        pos__ = 0U;
        validate_non_negative_index("gamma_y_raw", "N_gamma_y", N_gamma_y);
        context__.validate_dims("parameter initialization", "gamma_y_raw", "vector_d", context__.to_vec(N_gamma_y));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_y_raw(N_gamma_y);
        size_t gamma_y_raw_j_1_max__ = N_gamma_y;
        for (size_t j_1__ = 0; j_1__ < gamma_y_raw_j_1_max__; ++j_1__) {
            gamma_y_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(gamma_y_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_y_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("delta_c_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_c_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_c_raw");
        pos__ = 0U;
        validate_non_negative_index("delta_c_raw", "N_delta_c", N_delta_c);
        context__.validate_dims("parameter initialization", "delta_c_raw", "vector_d", context__.to_vec(N_delta_c));
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta_c_raw(N_delta_c);
        size_t delta_c_raw_j_1_max__ = N_delta_c;
        for (size_t j_1__ = 0; j_1__ < delta_c_raw_j_1_max__; ++j_1__) {
            delta_c_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(delta_c_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_c_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("eta_c_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable eta_c_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("eta_c_sd");
        pos__ = 0U;
        validate_non_negative_index("eta_c_sd", "est_init_effects", est_init_effects);
        context__.validate_dims("parameter initialization", "eta_c_sd", "double", context__.to_vec(est_init_effects));
        std::vector<double> eta_c_sd(est_init_effects, double(0));
        size_t eta_c_sd_k_0_max__ = est_init_effects;
        for (size_t k_0__ = 0; k_0__ < eta_c_sd_k_0_max__; ++k_0__) {
            eta_c_sd[k_0__] = vals_r__[pos__++];
        }
        size_t eta_c_sd_i_0_max__ = est_init_effects;
        for (size_t i_0__ = 0; i_0__ < eta_c_sd_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, eta_c_sd[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable eta_c_sd: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("delta_c_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_c_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_c_sd");
        pos__ = 0U;
        validate_non_negative_index("delta_c_sd", "est_cohort_effects", est_cohort_effects);
        context__.validate_dims("parameter initialization", "delta_c_sd", "double", context__.to_vec(est_cohort_effects));
        std::vector<double> delta_c_sd(est_cohort_effects, double(0));
        size_t delta_c_sd_k_0_max__ = est_cohort_effects;
        for (size_t k_0__ = 0; k_0__ < delta_c_sd_k_0_max__; ++k_0__) {
            delta_c_sd[k_0__] = vals_r__[pos__++];
        }
        size_t delta_c_sd_i_0_max__ = est_cohort_effects;
        for (size_t i_0__ = 0; i_0__ < delta_c_sd_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, delta_c_sd[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_c_sd: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 29;
        if (!(context__.contains_r("gamma_y_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma_y_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma_y_sd");
        pos__ = 0U;
        validate_non_negative_index("gamma_y_sd", "est_year_effects", est_year_effects);
        context__.validate_dims("parameter initialization", "gamma_y_sd", "double", context__.to_vec(est_year_effects));
        std::vector<double> gamma_y_sd(est_year_effects, double(0));
        size_t gamma_y_sd_k_0_max__ = est_year_effects;
        for (size_t k_0__ = 0; k_0__ < gamma_y_sd_k_0_max__; ++k_0__) {
            gamma_y_sd[k_0__] = vals_r__[pos__++];
        }
        size_t gamma_y_sd_i_0_max__ = est_year_effects;
        for (size_t i_0__ = 0; i_0__ < gamma_y_sd_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, gamma_y_sd[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma_y_sd: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 19;
            local_scalar_t__ beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.scalar_lub_constrain(-(0.99), 0.99, lp__);
            else
                beta = in__.scalar_lub_constrain(-(0.99), 0.99);
            current_statement_begin__ = 20;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pro_error_raw;
            (void) pro_error_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                pro_error_raw = in__.vector_constrain(n_proc_error, lp__);
            else
                pro_error_raw = in__.vector_constrain(n_proc_error);
            current_statement_begin__ = 21;
            std::vector<local_scalar_t__> X0;
            size_t X0_d_0_max__ = (1 - est_init_effects);
            X0.reserve(X0_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < X0_d_0_max__; ++d_0__) {
                if (jacobian__)
                    X0.push_back(in__.scalar_constrain(lp__));
                else
                    X0.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 22;
            local_scalar_t__ sigma_p;
            (void) sigma_p;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_p = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_p = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 23;
            local_scalar_t__ sigma_o;
            (void) sigma_o;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_o = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_o = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 24;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_c_raw;
            (void) eta_c_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                eta_c_raw = in__.vector_constrain(N_eta_c, lp__);
            else
                eta_c_raw = in__.vector_constrain(N_eta_c);
            current_statement_begin__ = 25;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma_y_raw;
            (void) gamma_y_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma_y_raw = in__.vector_constrain(N_gamma_y, lp__);
            else
                gamma_y_raw = in__.vector_constrain(N_gamma_y);
            current_statement_begin__ = 26;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_c_raw;
            (void) delta_c_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                delta_c_raw = in__.vector_constrain(N_delta_c, lp__);
            else
                delta_c_raw = in__.vector_constrain(N_delta_c);
            current_statement_begin__ = 27;
            std::vector<local_scalar_t__> eta_c_sd;
            size_t eta_c_sd_d_0_max__ = est_init_effects;
            eta_c_sd.reserve(eta_c_sd_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < eta_c_sd_d_0_max__; ++d_0__) {
                if (jacobian__)
                    eta_c_sd.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    eta_c_sd.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 28;
            std::vector<local_scalar_t__> delta_c_sd;
            size_t delta_c_sd_d_0_max__ = est_cohort_effects;
            delta_c_sd.reserve(delta_c_sd_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < delta_c_sd_d_0_max__; ++d_0__) {
                if (jacobian__)
                    delta_c_sd.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    delta_c_sd.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 29;
            std::vector<local_scalar_t__> gamma_y_sd;
            size_t gamma_y_sd_d_0_max__ = est_year_effects;
            gamma_y_sd.reserve(gamma_y_sd_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < gamma_y_sd_d_0_max__; ++d_0__) {
                if (jacobian__)
                    gamma_y_sd.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    gamma_y_sd.push_back(in__.scalar_lb_constrain(0));
            }
            // transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("xaa", "Nages", Nages);
            validate_non_negative_index("xaa", "Ncohorts", Ncohorts);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> xaa(Nages, Ncohorts);
            stan::math::initialize(xaa, DUMMY_VAR__);
            stan::math::fill(xaa, DUMMY_VAR__);
            current_statement_begin__ = 33;
            validate_non_negative_index("delta_c", "N_delta_c", N_delta_c);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_c(N_delta_c);
            stan::math::initialize(delta_c, DUMMY_VAR__);
            stan::math::fill(delta_c, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("gamma_y", "N_gamma_y", N_gamma_y);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma_y(N_gamma_y);
            stan::math::initialize(gamma_y, DUMMY_VAR__);
            stan::math::fill(gamma_y, DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("eta_c", "N_eta_c", N_eta_c);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta_c(N_eta_c);
            stan::math::initialize(eta_c, DUMMY_VAR__);
            stan::math::fill(eta_c, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 36;
            stan::math::assign(xaa, rep_matrix(0, Nages, Ncohorts));
            current_statement_begin__ = 39;
            if (as_bool(est_cohort_effects)) {
                current_statement_begin__ = 39;
                stan::math::assign(delta_c, multiply(delta_c_raw, get_base1(delta_c_sd, 1, "delta_c_sd", 1)));
            }
            current_statement_begin__ = 40;
            if (as_bool(est_init_effects)) {
                current_statement_begin__ = 40;
                stan::math::assign(eta_c, multiply(eta_c_raw, get_base1(eta_c_sd, 1, "eta_c_sd", 1)));
            }
            current_statement_begin__ = 41;
            if (as_bool(est_year_effects)) {
                current_statement_begin__ = 41;
                stan::math::assign(gamma_y, multiply(gamma_y_raw, get_base1(gamma_y_sd, 1, "gamma_y_sd", 1)));
            }
            current_statement_begin__ = 43;
            for (int y = 1; y <= Ncohorts; ++y) {
                current_statement_begin__ = 44;
                if (as_bool(logical_negation(est_init_effects))) {
                    current_statement_begin__ = 44;
                    stan::model::assign(xaa, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(y), stan::model::nil_index_list())), 
                                get_base1(X0, 1, "X0", 1), 
                                "assigning variable xaa");
                }
                current_statement_begin__ = 45;
                if (as_bool(est_init_effects)) {
                    current_statement_begin__ = 45;
                    stan::model::assign(xaa, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(y), stan::model::nil_index_list())), 
                                get_base1(eta_c, y, "eta_c", 1), 
                                "assigning variable xaa");
                }
            }
            {
            current_statement_begin__ = 48;
            int ii(0);
            (void) ii;  // dummy to suppress unused var warning
            stan::math::fill(ii, std::numeric_limits<int>::min());
            current_statement_begin__ = 49;
            stan::math::assign(ii, 0);
            current_statement_begin__ = 50;
            for (int y = 2; y <= Ncohorts; ++y) {
                current_statement_begin__ = 51;
                for (int i = 2; i <= Nages; ++i) {
                    current_statement_begin__ = 52;
                    if (as_bool(logical_neq(get_base1(get_base1(cohort_id, (i - 1), "cohort_id", 1), (y - 1), "cohort_id", 2), 999))) {
                        current_statement_begin__ = 53;
                        stan::math::assign(ii, (ii + 1));
                        current_statement_begin__ = 54;
                        stan::model::assign(xaa, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(y), stan::model::nil_index_list())), 
                                    ((beta * get_base1(xaa, (i - 1), (y - 1), "xaa", 1)) + get_base1(pro_error_raw, ii, "pro_error_raw", 1)), 
                                    "assigning variable xaa");
                        current_statement_begin__ = 55;
                        if (as_bool(est_cohort_effects)) {
                            current_statement_begin__ = 55;
                            stan::model::assign(xaa, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(y), stan::model::nil_index_list())), 
                                        (get_base1(xaa, i, y, "xaa", 1) + get_base1(delta_c, get_base1(get_base1(cohort_id, i, "cohort_id", 1), y, "cohort_id", 2), "delta_c", 1)), 
                                        "assigning variable xaa");
                        }
                        current_statement_begin__ = 56;
                        if (as_bool(est_year_effects)) {
                            current_statement_begin__ = 56;
                            stan::model::assign(xaa, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(y), stan::model::nil_index_list())), 
                                        (get_base1(xaa, i, y, "xaa", 1) + get_base1(gamma_y, y, "gamma_y", 1)), 
                                        "assigning variable xaa");
                        }
                    }
                }
            }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 32;
            size_t xaa_j_1_max__ = Nages;
            size_t xaa_j_2_max__ = Ncohorts;
            for (size_t j_1__ = 0; j_1__ < xaa_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < xaa_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(xaa(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: xaa" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable xaa: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 33;
            size_t delta_c_j_1_max__ = N_delta_c;
            for (size_t j_1__ = 0; j_1__ < delta_c_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(delta_c(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: delta_c" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable delta_c: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 34;
            size_t gamma_y_j_1_max__ = N_gamma_y;
            for (size_t j_1__ = 0; j_1__ < gamma_y_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(gamma_y(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: gamma_y" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable gamma_y: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 35;
            size_t eta_c_j_1_max__ = N_eta_c;
            for (size_t j_1__ = 0; j_1__ < eta_c_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(eta_c(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: eta_c" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta_c: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 63;
            lp_accum__.add(normal_log<propto__>(pro_error_raw, 0, sigma_p));
            current_statement_begin__ = 65;
            lp_accum__.add(normal_log<propto__>(to_vector(laa), to_vector(stan::model::rvalue(xaa, stan::model::cons_list(stan::model::index_min_max(1, Nages), stan::model::cons_list(stan::model::index_min_max(Nages, Ncohorts), stan::model::nil_index_list())), "xaa")), sigma_o));
            current_statement_begin__ = 66;
            lp_accum__.add(normal_log<propto__>(sigma_p, 0, 1));
            current_statement_begin__ = 67;
            lp_accum__.add(lognormal_log<propto__>(sigma_o, get_base1(sigma_o_prior, 1, "sigma_o_prior", 1), get_base1(sigma_o_prior, 2, "sigma_o_prior", 1)));
            current_statement_begin__ = 68;
            lp_accum__.add(std_normal_log<propto__>(beta));
            current_statement_begin__ = 69;
            if (as_bool(est_year_effects)) {
                current_statement_begin__ = 70;
                lp_accum__.add(std_normal_log<propto__>(gamma_y_raw));
                current_statement_begin__ = 71;
                lp_accum__.add(normal_log<propto__>(gamma_y_sd, 0, 1));
            }
            current_statement_begin__ = 73;
            if (as_bool(est_cohort_effects)) {
                current_statement_begin__ = 74;
                lp_accum__.add(std_normal_log<propto__>(delta_c_raw));
                current_statement_begin__ = 75;
                lp_accum__.add(normal_log<propto__>(delta_c_sd, 0, 1));
            }
            current_statement_begin__ = 77;
            if (as_bool(est_init_effects)) {
                current_statement_begin__ = 78;
                lp_accum__.add(std_normal_log<propto__>(eta_c_raw));
                current_statement_begin__ = 79;
                lp_accum__.add(normal_log<propto__>(eta_c_sd, 0, 1));
            }
            current_statement_begin__ = 81;
            if (as_bool(logical_negation(est_init_effects))) {
                current_statement_begin__ = 82;
                lp_accum__.add(normal_log<propto__>(get_base1(X0, 1, "X0", 1), 0, sigma_p));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("pro_error_raw");
        names__.push_back("X0");
        names__.push_back("sigma_p");
        names__.push_back("sigma_o");
        names__.push_back("eta_c_raw");
        names__.push_back("gamma_y_raw");
        names__.push_back("delta_c_raw");
        names__.push_back("eta_c_sd");
        names__.push_back("delta_c_sd");
        names__.push_back("gamma_y_sd");
        names__.push_back("xaa");
        names__.push_back("delta_c");
        names__.push_back("gamma_y");
        names__.push_back("eta_c");
        names__.push_back("laa_postpred");
        names__.push_back("log_lik");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_proc_error);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((1 - est_init_effects));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_eta_c);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_gamma_y);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_delta_c);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_init_effects);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_cohort_effects);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(est_year_effects);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nages);
        dims__.push_back(Ncohorts);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_delta_c);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_gamma_y);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_eta_c);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nages);
        dims__.push_back(Nyears);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nages);
        dims__.push_back(Nyears);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_base_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double beta = in__.scalar_lub_constrain(-(0.99), 0.99);
        vars__.push_back(beta);
        Eigen::Matrix<double, Eigen::Dynamic, 1> pro_error_raw = in__.vector_constrain(n_proc_error);
        size_t pro_error_raw_j_1_max__ = n_proc_error;
        for (size_t j_1__ = 0; j_1__ < pro_error_raw_j_1_max__; ++j_1__) {
            vars__.push_back(pro_error_raw(j_1__));
        }
        std::vector<double> X0;
        size_t X0_d_0_max__ = (1 - est_init_effects);
        X0.reserve(X0_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < X0_d_0_max__; ++d_0__) {
            X0.push_back(in__.scalar_constrain());
        }
        size_t X0_k_0_max__ = (1 - est_init_effects);
        for (size_t k_0__ = 0; k_0__ < X0_k_0_max__; ++k_0__) {
            vars__.push_back(X0[k_0__]);
        }
        double sigma_p = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_p);
        double sigma_o = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_o);
        Eigen::Matrix<double, Eigen::Dynamic, 1> eta_c_raw = in__.vector_constrain(N_eta_c);
        size_t eta_c_raw_j_1_max__ = N_eta_c;
        for (size_t j_1__ = 0; j_1__ < eta_c_raw_j_1_max__; ++j_1__) {
            vars__.push_back(eta_c_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_y_raw = in__.vector_constrain(N_gamma_y);
        size_t gamma_y_raw_j_1_max__ = N_gamma_y;
        for (size_t j_1__ = 0; j_1__ < gamma_y_raw_j_1_max__; ++j_1__) {
            vars__.push_back(gamma_y_raw(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta_c_raw = in__.vector_constrain(N_delta_c);
        size_t delta_c_raw_j_1_max__ = N_delta_c;
        for (size_t j_1__ = 0; j_1__ < delta_c_raw_j_1_max__; ++j_1__) {
            vars__.push_back(delta_c_raw(j_1__));
        }
        std::vector<double> eta_c_sd;
        size_t eta_c_sd_d_0_max__ = est_init_effects;
        eta_c_sd.reserve(eta_c_sd_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < eta_c_sd_d_0_max__; ++d_0__) {
            eta_c_sd.push_back(in__.scalar_lb_constrain(0));
        }
        size_t eta_c_sd_k_0_max__ = est_init_effects;
        for (size_t k_0__ = 0; k_0__ < eta_c_sd_k_0_max__; ++k_0__) {
            vars__.push_back(eta_c_sd[k_0__]);
        }
        std::vector<double> delta_c_sd;
        size_t delta_c_sd_d_0_max__ = est_cohort_effects;
        delta_c_sd.reserve(delta_c_sd_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < delta_c_sd_d_0_max__; ++d_0__) {
            delta_c_sd.push_back(in__.scalar_lb_constrain(0));
        }
        size_t delta_c_sd_k_0_max__ = est_cohort_effects;
        for (size_t k_0__ = 0; k_0__ < delta_c_sd_k_0_max__; ++k_0__) {
            vars__.push_back(delta_c_sd[k_0__]);
        }
        std::vector<double> gamma_y_sd;
        size_t gamma_y_sd_d_0_max__ = est_year_effects;
        gamma_y_sd.reserve(gamma_y_sd_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < gamma_y_sd_d_0_max__; ++d_0__) {
            gamma_y_sd.push_back(in__.scalar_lb_constrain(0));
        }
        size_t gamma_y_sd_k_0_max__ = est_year_effects;
        for (size_t k_0__ = 0; k_0__ < gamma_y_sd_k_0_max__; ++k_0__) {
            vars__.push_back(gamma_y_sd[k_0__]);
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 32;
            validate_non_negative_index("xaa", "Nages", Nages);
            validate_non_negative_index("xaa", "Ncohorts", Ncohorts);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> xaa(Nages, Ncohorts);
            stan::math::initialize(xaa, DUMMY_VAR__);
            stan::math::fill(xaa, DUMMY_VAR__);
            current_statement_begin__ = 33;
            validate_non_negative_index("delta_c", "N_delta_c", N_delta_c);
            Eigen::Matrix<double, Eigen::Dynamic, 1> delta_c(N_delta_c);
            stan::math::initialize(delta_c, DUMMY_VAR__);
            stan::math::fill(delta_c, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("gamma_y", "N_gamma_y", N_gamma_y);
            Eigen::Matrix<double, Eigen::Dynamic, 1> gamma_y(N_gamma_y);
            stan::math::initialize(gamma_y, DUMMY_VAR__);
            stan::math::fill(gamma_y, DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("eta_c", "N_eta_c", N_eta_c);
            Eigen::Matrix<double, Eigen::Dynamic, 1> eta_c(N_eta_c);
            stan::math::initialize(eta_c, DUMMY_VAR__);
            stan::math::fill(eta_c, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 36;
            stan::math::assign(xaa, rep_matrix(0, Nages, Ncohorts));
            current_statement_begin__ = 39;
            if (as_bool(est_cohort_effects)) {
                current_statement_begin__ = 39;
                stan::math::assign(delta_c, multiply(delta_c_raw, get_base1(delta_c_sd, 1, "delta_c_sd", 1)));
            }
            current_statement_begin__ = 40;
            if (as_bool(est_init_effects)) {
                current_statement_begin__ = 40;
                stan::math::assign(eta_c, multiply(eta_c_raw, get_base1(eta_c_sd, 1, "eta_c_sd", 1)));
            }
            current_statement_begin__ = 41;
            if (as_bool(est_year_effects)) {
                current_statement_begin__ = 41;
                stan::math::assign(gamma_y, multiply(gamma_y_raw, get_base1(gamma_y_sd, 1, "gamma_y_sd", 1)));
            }
            current_statement_begin__ = 43;
            for (int y = 1; y <= Ncohorts; ++y) {
                current_statement_begin__ = 44;
                if (as_bool(logical_negation(est_init_effects))) {
                    current_statement_begin__ = 44;
                    stan::model::assign(xaa, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(y), stan::model::nil_index_list())), 
                                get_base1(X0, 1, "X0", 1), 
                                "assigning variable xaa");
                }
                current_statement_begin__ = 45;
                if (as_bool(est_init_effects)) {
                    current_statement_begin__ = 45;
                    stan::model::assign(xaa, 
                                stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(y), stan::model::nil_index_list())), 
                                get_base1(eta_c, y, "eta_c", 1), 
                                "assigning variable xaa");
                }
            }
            {
            current_statement_begin__ = 48;
            int ii(0);
            (void) ii;  // dummy to suppress unused var warning
            stan::math::fill(ii, std::numeric_limits<int>::min());
            current_statement_begin__ = 49;
            stan::math::assign(ii, 0);
            current_statement_begin__ = 50;
            for (int y = 2; y <= Ncohorts; ++y) {
                current_statement_begin__ = 51;
                for (int i = 2; i <= Nages; ++i) {
                    current_statement_begin__ = 52;
                    if (as_bool(logical_neq(get_base1(get_base1(cohort_id, (i - 1), "cohort_id", 1), (y - 1), "cohort_id", 2), 999))) {
                        current_statement_begin__ = 53;
                        stan::math::assign(ii, (ii + 1));
                        current_statement_begin__ = 54;
                        stan::model::assign(xaa, 
                                    stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(y), stan::model::nil_index_list())), 
                                    ((beta * get_base1(xaa, (i - 1), (y - 1), "xaa", 1)) + get_base1(pro_error_raw, ii, "pro_error_raw", 1)), 
                                    "assigning variable xaa");
                        current_statement_begin__ = 55;
                        if (as_bool(est_cohort_effects)) {
                            current_statement_begin__ = 55;
                            stan::model::assign(xaa, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(y), stan::model::nil_index_list())), 
                                        (get_base1(xaa, i, y, "xaa", 1) + get_base1(delta_c, get_base1(get_base1(cohort_id, i, "cohort_id", 1), y, "cohort_id", 2), "delta_c", 1)), 
                                        "assigning variable xaa");
                        }
                        current_statement_begin__ = 56;
                        if (as_bool(est_year_effects)) {
                            current_statement_begin__ = 56;
                            stan::model::assign(xaa, 
                                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(y), stan::model::nil_index_list())), 
                                        (get_base1(xaa, i, y, "xaa", 1) + get_base1(gamma_y, y, "gamma_y", 1)), 
                                        "assigning variable xaa");
                        }
                    }
                }
            }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t xaa_j_2_max__ = Ncohorts;
                size_t xaa_j_1_max__ = Nages;
                for (size_t j_2__ = 0; j_2__ < xaa_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < xaa_j_1_max__; ++j_1__) {
                        vars__.push_back(xaa(j_1__, j_2__));
                    }
                }
                size_t delta_c_j_1_max__ = N_delta_c;
                for (size_t j_1__ = 0; j_1__ < delta_c_j_1_max__; ++j_1__) {
                    vars__.push_back(delta_c(j_1__));
                }
                size_t gamma_y_j_1_max__ = N_gamma_y;
                for (size_t j_1__ = 0; j_1__ < gamma_y_j_1_max__; ++j_1__) {
                    vars__.push_back(gamma_y(j_1__));
                }
                size_t eta_c_j_1_max__ = N_eta_c;
                for (size_t j_1__ = 0; j_1__ < eta_c_j_1_max__; ++j_1__) {
                    vars__.push_back(eta_c(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 86;
            validate_non_negative_index("laa_postpred", "Nages", Nages);
            validate_non_negative_index("laa_postpred", "Nyears", Nyears);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> laa_postpred(Nages, Nyears);
            stan::math::initialize(laa_postpred, DUMMY_VAR__);
            stan::math::fill(laa_postpred, DUMMY_VAR__);
            current_statement_begin__ = 87;
            validate_non_negative_index("log_lik", "Nages", Nages);
            validate_non_negative_index("log_lik", "Nyears", Nyears);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> log_lik(Nages, Nyears);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 88;
            for (int i = 1; i <= Nages; ++i) {
                current_statement_begin__ = 89;
                for (int y = 1; y <= Nyears; ++y) {
                    current_statement_begin__ = 90;
                    stan::model::assign(laa_postpred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(y), stan::model::nil_index_list())), 
                                normal_rng(get_base1(xaa, i, (y + (Nages - 1)), "xaa", 1), sigma_o, base_rng__), 
                                "assigning variable laa_postpred");
                    current_statement_begin__ = 91;
                    stan::model::assign(log_lik, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(y), stan::model::nil_index_list())), 
                                normal_log(get_base1(laa, i, y, "laa", 1), get_base1(xaa, i, (y + (Nages - 1)), "xaa", 1), sigma_o), 
                                "assigning variable log_lik");
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 86;
            size_t laa_postpred_j_2_max__ = Nyears;
            size_t laa_postpred_j_1_max__ = Nages;
            for (size_t j_2__ = 0; j_2__ < laa_postpred_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < laa_postpred_j_1_max__; ++j_1__) {
                    vars__.push_back(laa_postpred(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 87;
            size_t log_lik_j_2_max__ = Nyears;
            size_t log_lik_j_1_max__ = Nages;
            for (size_t j_2__ = 0; j_2__ < log_lik_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                    vars__.push_back(log_lik(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_base";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());
        size_t pro_error_raw_j_1_max__ = n_proc_error;
        for (size_t j_1__ = 0; j_1__ < pro_error_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pro_error_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t X0_k_0_max__ = (1 - est_init_effects);
        for (size_t k_0__ = 0; k_0__ < X0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "X0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_p";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_o";
        param_names__.push_back(param_name_stream__.str());
        size_t eta_c_raw_j_1_max__ = N_eta_c;
        for (size_t j_1__ = 0; j_1__ < eta_c_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_c_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_y_raw_j_1_max__ = N_gamma_y;
        for (size_t j_1__ = 0; j_1__ < gamma_y_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_y_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_c_raw_j_1_max__ = N_delta_c;
        for (size_t j_1__ = 0; j_1__ < delta_c_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_c_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_c_sd_k_0_max__ = est_init_effects;
        for (size_t k_0__ = 0; k_0__ < eta_c_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_c_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_c_sd_k_0_max__ = est_cohort_effects;
        for (size_t k_0__ = 0; k_0__ < delta_c_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_c_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_y_sd_k_0_max__ = est_year_effects;
        for (size_t k_0__ = 0; k_0__ < gamma_y_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_y_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t xaa_j_2_max__ = Ncohorts;
            size_t xaa_j_1_max__ = Nages;
            for (size_t j_2__ = 0; j_2__ < xaa_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xaa_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "xaa" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t delta_c_j_1_max__ = N_delta_c;
            for (size_t j_1__ = 0; j_1__ < delta_c_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta_c" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t gamma_y_j_1_max__ = N_gamma_y;
            for (size_t j_1__ = 0; j_1__ < gamma_y_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_y" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta_c_j_1_max__ = N_eta_c;
            for (size_t j_1__ = 0; j_1__ < eta_c_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta_c" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t laa_postpred_j_2_max__ = Nyears;
        size_t laa_postpred_j_1_max__ = Nages;
        for (size_t j_2__ = 0; j_2__ < laa_postpred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < laa_postpred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "laa_postpred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_j_2_max__ = Nyears;
        size_t log_lik_j_1_max__ = Nages;
        for (size_t j_2__ = 0; j_2__ < log_lik_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta";
        param_names__.push_back(param_name_stream__.str());
        size_t pro_error_raw_j_1_max__ = n_proc_error;
        for (size_t j_1__ = 0; j_1__ < pro_error_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pro_error_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t X0_k_0_max__ = (1 - est_init_effects);
        for (size_t k_0__ = 0; k_0__ < X0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "X0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_p";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_o";
        param_names__.push_back(param_name_stream__.str());
        size_t eta_c_raw_j_1_max__ = N_eta_c;
        for (size_t j_1__ = 0; j_1__ < eta_c_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_c_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_y_raw_j_1_max__ = N_gamma_y;
        for (size_t j_1__ = 0; j_1__ < gamma_y_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_y_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_c_raw_j_1_max__ = N_delta_c;
        for (size_t j_1__ = 0; j_1__ < delta_c_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_c_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t eta_c_sd_k_0_max__ = est_init_effects;
        for (size_t k_0__ = 0; k_0__ < eta_c_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "eta_c_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_c_sd_k_0_max__ = est_cohort_effects;
        for (size_t k_0__ = 0; k_0__ < delta_c_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_c_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_y_sd_k_0_max__ = est_year_effects;
        for (size_t k_0__ = 0; k_0__ < gamma_y_sd_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma_y_sd" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t xaa_j_2_max__ = Ncohorts;
            size_t xaa_j_1_max__ = Nages;
            for (size_t j_2__ = 0; j_2__ < xaa_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xaa_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "xaa" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t delta_c_j_1_max__ = N_delta_c;
            for (size_t j_1__ = 0; j_1__ < delta_c_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta_c" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t gamma_y_j_1_max__ = N_gamma_y;
            for (size_t j_1__ = 0; j_1__ < gamma_y_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "gamma_y" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta_c_j_1_max__ = N_eta_c;
            for (size_t j_1__ = 0; j_1__ < eta_c_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta_c" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t laa_postpred_j_2_max__ = Nyears;
        size_t laa_postpred_j_1_max__ = Nages;
        for (size_t j_2__ = 0; j_2__ < laa_postpred_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < laa_postpred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "laa_postpred" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t log_lik_j_2_max__ = Nyears;
        size_t log_lik_j_1_max__ = Nages;
        for (size_t j_2__ = 0; j_2__ < log_lik_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "log_lik" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_base_namespace::model_base stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
